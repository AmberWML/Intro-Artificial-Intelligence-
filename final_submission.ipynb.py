{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# install custome packages\n",
    "!pip install -U --pre /kaggle/input/pytorchcv/pytorchcv-0.0.57-py2.py3-none-any.whl --quiet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/pip/_internal/commands/install.py:283: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\r\n",
      "  cmdoptions.check_install_build_global(options)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install --install-option=\"--no\" --install-option=\"DLIB_USE_CUDA\" /kaggle/input/dlibcustom/dlib-19.19.0 --quiet\n",
    "import dlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_model = dlib.shape_predictor(\"/kaggle/input/shapepredictor/shapepredictor/shape_predictor_68_face_landmarks.dat\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import os\n",
    "import pywt\n",
    "from PIL import Image\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import cv2\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torchvision\n",
    "from pytorchcv.model_provider import get_model as get_model\n",
    "\n",
    "face_detect_threshold = 0.6\n",
    "input_size = 300"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "lst_checkpoints = [\n",
    "    \"/kaggle/input/effb3c/epoch_26_iterations_10738_checkpoint.pth\",\n",
    "    \"/kaggle/input/cmhmodel324/ns_1r_0.12450872300527034_5100\",\n",
    "    \"/kaggle/input/cmhmodel324/ns_3r_0.15575205658872923_2600\",\n",
    "    \"/kaggle/input/effb3cv2/effb3cv2/EffB3c_0.185248_92.61614990234375_17851.pth\",\n",
    "    \"/kaggle/input/effb3cv2/effb3cv2/EffB3c_0.155268_94.03153991699219_16817.pth\",\n",
    "    \"/kaggle/input/effb3cv2/effb3cv2/EffB3c_0.212327_91.5226058959961_16036.pth\",\n",
    "    \"/kaggle/input/externalmodels/ext_1_0.12888790712906764_6000\",\n",
    "    \"/kaggle/input/ext330/ext330/EffB3c_0.129176_95.04505157470703_27321.pth\",\n",
    "    \"/kaggle/input/ext330/ext330/EffB3c_0.158503_94.71409606933594_19391.pth\",\n",
    "    \"/kaggle/input/ext330/ext330/EffB3c_0.143932_95.13274383544922_15016.pth\",\n",
    "    \"/kaggle/input/lrcnmodels/LRCN_0.072455_97.3298110961914_1231_half.pth\",\n",
    "    \"/kaggle/input/lrcnmodels/LRCN_0.065779_97.68193054199219_961_half.pth\",\n",
    "    \"/kaggle/input/lrcnmodels/LRCN_0.138454_95.32738494873047_1111.pth\",\n",
    "    \"/kaggle/input/transformermodel/CnnTransformer_0.057246_98.24405670166016_1921.pth\",\n",
    "    \"/kaggle/input/transformermodel/CnnTransformer_0.087577_97.24178314208984_1411.pth\",\n",
    "    \"/kaggle/input/transformermodel/CnnTransformer_0.121079_96.18643951416016_1261.pth\"\n",
    "]\n",
    "\n",
    "import sys\n",
    "sys.path.append('/kaggle/input/')\n",
    "\n",
    "import tensorflow as tf\n",
    "from centerface.centerface import *\n",
    "\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "tf.config.experimental.set_virtual_device_configuration(\n",
    "        gpus[0],\n",
    "        [\n",
    "         tf.config.experimental.VirtualDeviceConfiguration(memory_limit=1200)\n",
    "        ]\n",
    ")\n",
    "num_logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n",
    "with tf.device(\"/device:GPU:0\"):\n",
    "    nets = centerface(path='/kaggle/input/centerface')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EffB3c(\n",
       "  (model): EfficientNet(\n",
       "    (features): Sequential(\n",
       "      (init_block): EffiInitBlock(\n",
       "        (conv): ConvBlock(\n",
       "          (conv): Conv2d(3, 40, kernel_size=(3, 3), stride=(2, 2), bias=False)\n",
       "          (bn): BatchNorm2d(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          (activ): Swish()\n",
       "        )\n",
       "      )\n",
       "      (stage1): Sequential(\n",
       "        (unit1): EffiDwsConvUnit(\n",
       "          (dw_conv): ConvBlock(\n",
       "            (conv): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), groups=40, bias=False)\n",
       "            (bn): BatchNorm2d(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (pw_conv): ConvBlock(\n",
       "            (conv): Conv2d(40, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiDwsConvUnit(\n",
       "          (dw_conv): ConvBlock(\n",
       "            (conv): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), groups=24, bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(24, 6, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(6, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (pw_conv): ConvBlock(\n",
       "            (conv): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage2): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(144, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), groups=144, bias=False)\n",
       "            (bn): BatchNorm2d(144, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage3): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(5, 5), stride=(2, 2), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage4): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(3, 3), stride=(2, 2), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit4): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit5): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit6): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit7): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit8): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit9): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit10): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage5): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(2, 2), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit4): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit5): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit6): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit7): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(3, 3), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit8): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(384, 2304, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(2304, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(2304, 2304, kernel_size=(3, 3), stride=(1, 1), groups=2304, bias=False)\n",
       "            (bn): BatchNorm2d(2304, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(2304, 96, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(96, 2304, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(2304, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (final_block): ConvBlock(\n",
       "        (conv): Conv2d(384, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn): BatchNorm2d(1536, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (activ): Swish()\n",
       "      )\n",
       "      (final_pool): AdaptiveAvgPool2d(output_size=1)\n",
       "    )\n",
       "    (output): Sequential(\n",
       "      (dropout): Dropout(p=0.3, inplace=False)\n",
       "      (fc): Linear(in_features=1536, out_features=1, bias=True)\n",
       "    )\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class EffB3c(nn.Module):\n",
    "\n",
    "    def __init__(self):\n",
    "        super(EffB3c, self).__init__()\n",
    "        self.model = get_model(\"efficientnet_b3c\", pretrained=False)\n",
    "        self.model.output.fc = nn.Linear(1536, 1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n",
    "\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[0])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model1 = EffB3c()  \n",
    "model1.load_state_dict(state_dict)\n",
    "model1 = model1.cuda(device=device)\n",
    "model1.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[1])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model2 = EffB3c()\n",
    "model2.load_state_dict(state_dict)\n",
    "model2 = model2.cuda(device=device)\n",
    "model2.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[2])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model3 = EffB3c()\n",
    "model3.load_state_dict(state_dict)\n",
    "model3 = model3.cuda(device=device)\n",
    "model3.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[3])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model4 = EffB3c()  \n",
    "model4.load_state_dict(state_dict)\n",
    "model4 = model4.cuda(device=device)\n",
    "model4.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[4])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model5 = EffB3c()\n",
    "model5.load_state_dict(state_dict)\n",
    "model5 = model5.cuda(device=device)\n",
    "model5.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[5])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model6 = EffB3c()\n",
    "model6.load_state_dict(state_dict)\n",
    "model6 = model6.cuda(device=device)\n",
    "model6.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[6])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model7 = EffB3c()\n",
    "model7.load_state_dict(state_dict)\n",
    "model7 = model7.cuda(device=device)\n",
    "model7.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[7])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model8 = EffB3c()\n",
    "model8.load_state_dict(state_dict)\n",
    "model8 = model8.cuda(device=device)\n",
    "model8.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[8])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model9 = EffB3c()\n",
    "model9.load_state_dict(state_dict)\n",
    "model9 = model9.cuda(device=device)\n",
    "model9.eval()\n",
    "\n",
    "checkpoint = torch.load(lst_checkpoints[9])\n",
    "state_dict = {}\n",
    "for key in checkpoint:\n",
    "    state_dict[key.replace(\"module.\", \"\")] = checkpoint[key]\n",
    "model10 = EffB3c()\n",
    "model10.load_state_dict(state_dict)\n",
    "model10 = model10.cuda(device=device)\n",
    "model10.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/torch/nn/modules/rnn.py:51: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.5 and num_layers=1\n",
      "  \"num_layers={}\".format(dropout, num_layers))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "CNN_LSTM_SINGLE(\n",
       "  (cnn): EfficientNetB3c_feature(\n",
       "    (model): Sequential(\n",
       "      (init_block): EffiInitBlock(\n",
       "        (conv): ConvBlock(\n",
       "          (conv): Conv2d(3, 40, kernel_size=(3, 3), stride=(2, 2), bias=False)\n",
       "          (bn): BatchNorm2d(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          (activ): Swish()\n",
       "        )\n",
       "      )\n",
       "      (stage1): Sequential(\n",
       "        (unit1): EffiDwsConvUnit(\n",
       "          (dw_conv): ConvBlock(\n",
       "            (conv): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), groups=40, bias=False)\n",
       "            (bn): BatchNorm2d(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (pw_conv): ConvBlock(\n",
       "            (conv): Conv2d(40, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiDwsConvUnit(\n",
       "          (dw_conv): ConvBlock(\n",
       "            (conv): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), groups=24, bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(24, 6, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(6, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (pw_conv): ConvBlock(\n",
       "            (conv): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage2): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(144, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), groups=144, bias=False)\n",
       "            (bn): BatchNorm2d(144, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage3): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(5, 5), stride=(2, 2), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage4): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(3, 3), stride=(2, 2), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit4): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit5): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit6): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit7): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit8): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit9): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit10): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage5): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(2, 2), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit4): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit5): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit6): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit7): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(3, 3), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit8): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(384, 2304, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(2304, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(2304, 2304, kernel_size=(3, 3), stride=(1, 1), groups=2304, bias=False)\n",
       "            (bn): BatchNorm2d(2304, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(2304, 96, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(96, 2304, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(2304, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (final_block): ConvBlock(\n",
       "        (conv): Conv2d(384, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn): BatchNorm2d(1536, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (activ): Swish()\n",
       "      )\n",
       "      (final_pool): AdaptiveAvgPool2d(output_size=1)\n",
       "    )\n",
       "  )\n",
       "  (lstm): LSTM(1536, 1024, batch_first=True, dropout=0.5, bidirectional=True)\n",
       "  (bn): BatchNorm1d(2048, eps=0.05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  (fc1): Linear(in_features=2048, out_features=1, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class EfficientNetB3c_feature(nn.Module):\n",
    "\n",
    "    def __init__(self):\n",
    "        super(EfficientNetB3c_feature, self).__init__()\n",
    "        self.model = get_model(\"efficientnet_b3c\", pretrained=False).features\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n",
    "    \n",
    "\n",
    "class CNN_LSTM_SHORT(nn.Module):\n",
    "\n",
    "    def __init__(self):\n",
    "        super(CNN_LSTM_SHORT, self ).__init__()\n",
    "        self.cnn_feature_dim = 1536# 512 * 7 * 7# 1536\n",
    "        self.cnn = EfficientNetB3c_feature()\n",
    "        self.freeze_until(self.cnn, \"model.stage5.unit1.conv1.conv.weight\")\n",
    "        # self.cnn = UNetFeature(3, 3, ckpt_path=ckpt_path)\n",
    "        # self.freeze_until(self.cnn, \"inc.double_conv.0.weight\")\n",
    "        self.lstm = torch.nn.LSTM(input_size=self.cnn_feature_dim,\n",
    "                                  hidden_size=1024,\n",
    "                                  num_layers=2,\n",
    "                                  batch_first=True,\n",
    "                                  dropout=0.5,\n",
    "                                  bidirectional=True)\n",
    "        self.bn = nn.BatchNorm1d(2048, eps=0.05, affine=True, track_running_stats=True)\n",
    "        self.fc1 = nn.Linear(2048, 1)\n",
    "        \n",
    "\n",
    "    def freeze_until(self, net, param_name):\n",
    "        found_name = False\n",
    "        for name, params in net.named_parameters():\n",
    "            if name == param_name:\n",
    "                found_name = True\n",
    "            params.requires_grad = found_name\n",
    "\n",
    "\n",
    "    def forward(self, x):\n",
    "        if not hasattr(self, '_flattened'):\n",
    "            self.lstm.flatten_parameters()\n",
    "            setattr(self, '_flattened', True)\n",
    "\n",
    "        batch_size, n_channels, n_frames, height, width = x.size()\n",
    "        x = x.permute(0, 2, 1, 3, 4)\n",
    "        x = x.reshape(batch_size * n_frames, n_channels, height, width)\n",
    "        x = self.cnn(x)\n",
    "        # print(x.shape)\n",
    "        x = x.view(batch_size, n_frames, self.cnn_feature_dim)\n",
    "\n",
    "        x, (h_n, h_c) = self.lstm(x)\n",
    "        x = x[:, -1]\n",
    "        x = self.bn(x)\n",
    "        x = F.dropout(x, p=0.3)\n",
    "        x = self.fc1(x)\n",
    "\n",
    "        return x\n",
    "    \n",
    "    \n",
    "class CNN_LSTM_SINGLE(nn.Module):\n",
    "\n",
    "    def __init__(self):\n",
    "        super(CNN_LSTM_SINGLE, self ).__init__()\n",
    "        self.cnn_feature_dim = 1536# 512 * 7 * 7# 1536\n",
    "        self.cnn = EfficientNetB3c_feature()\n",
    "        self.freeze_until(self.cnn, \"model.stage5.unit1.conv1.conv.weight\")\n",
    "        # self.cnn = UNetFeature(3, 3, ckpt_path=ckpt_path)\n",
    "        # self.freeze_until(self.cnn, \"inc.double_conv.0.weight\")\n",
    "        self.lstm = torch.nn.LSTM(input_size=self.cnn_feature_dim,\n",
    "                                  hidden_size=1024,\n",
    "                                  num_layers=1,\n",
    "                                  batch_first=True,\n",
    "                                  dropout=0.5,\n",
    "                                  bidirectional=True)\n",
    "        self.bn = nn.BatchNorm1d(2048, eps=0.05, affine=True, track_running_stats=True)\n",
    "        self.fc1 = nn.Linear(2048, 1)\n",
    "        \n",
    "\n",
    "    def freeze_until(self, net, param_name):\n",
    "        found_name = False\n",
    "        for name, params in net.named_parameters():\n",
    "            if name == param_name:\n",
    "                found_name = True\n",
    "            params.requires_grad = found_name\n",
    "\n",
    "\n",
    "    def forward(self, x):\n",
    "        if not hasattr(self, '_flattened'):\n",
    "            self.lstm.flatten_parameters()\n",
    "            setattr(self, '_flattened', True)\n",
    "\n",
    "        batch_size, n_channels, n_frames, height, width = x.size()\n",
    "        x = x.permute(0, 2, 1, 3, 4)\n",
    "        x = x.reshape(batch_size * n_frames, n_channels, height, width)\n",
    "        x = self.cnn(x)\n",
    "        # print(x.shape)\n",
    "        x = x.view(batch_size, n_frames, self.cnn_feature_dim)\n",
    "\n",
    "        x, (h_n, h_c) = self.lstm(x)\n",
    "        x = x[:, -1]\n",
    "        x = self.bn(x)\n",
    "        x = F.dropout(x, p=0.3)\n",
    "        x = self.fc1(x)\n",
    "\n",
    "        return x\n",
    "    \n",
    "\n",
    "model11 = CNN_LSTM_SHORT()\n",
    "model11.load_state_dict(torch.load(lst_checkpoints[10]))\n",
    "model11 = model11.cuda(device=device)\n",
    "model11.eval()\n",
    "model11.half()\n",
    "\n",
    "model12 = CNN_LSTM_SINGLE()\n",
    "model12.load_state_dict(torch.load(lst_checkpoints[11]))\n",
    "model12 = model12.cuda(device=device)\n",
    "model12.eval()\n",
    "model12.half()\n",
    "\n",
    "model13 = CNN_LSTM_SINGLE()\n",
    "model13.load_state_dict(torch.load(lst_checkpoints[12]))\n",
    "model13 = model13.cuda(device=device)\n",
    "model13.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/kaggle/input/transformer2/transformer_v3.py:18: UserWarning: nn.init.normal is now deprecated in favor of nn.init.normal_.\n",
      "  nn.init.normal(self.linear_1.weight, std=0.001)\n",
      "/kaggle/input/transformer2/transformer_v3.py:19: UserWarning: nn.init.normal is now deprecated in favor of nn.init.normal_.\n",
      "  nn.init.normal(self.linear_2.weight, std=0.001)\n",
      "/kaggle/input/transformer2/transformer_v3.py:131: UserWarning: nn.init.normal is now deprecated in favor of nn.init.normal_.\n",
      "  nn.init.normal(self.q_linear.weight, std=0.001)\n",
      "/kaggle/input/transformer2/transformer_v3.py:132: UserWarning: nn.init.constant is now deprecated in favor of nn.init.constant_.\n",
      "  nn.init.constant(self.q_linear.bias, 0)\n",
      "/kaggle/input/transformer2/transformer_v3.py:176: UserWarning: nn.init.kaiming_normal is now deprecated in favor of nn.init.kaiming_normal_.\n",
      "  nn.init.kaiming_normal(self.Qpr.weight, mode='fan_out')\n",
      "/kaggle/input/transformer2/transformer_v3.py:178: UserWarning: nn.init.constant is now deprecated in favor of nn.init.constant_.\n",
      "  nn.init.constant(self.bn1.weight , 1)\n",
      "/kaggle/input/transformer2/transformer_v3.py:179: UserWarning: nn.init.constant is now deprecated in favor of nn.init.constant_.\n",
      "  nn.init.constant(self.bn1.bias , 0)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "CNN_Transformer(\n",
       "  (cnn): EfficientNetB3c_feature(\n",
       "    (model): Sequential(\n",
       "      (init_block): EffiInitBlock(\n",
       "        (conv): ConvBlock(\n",
       "          (conv): Conv2d(3, 40, kernel_size=(3, 3), stride=(2, 2), bias=False)\n",
       "          (bn): BatchNorm2d(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          (activ): Swish()\n",
       "        )\n",
       "      )\n",
       "      (stage1): Sequential(\n",
       "        (unit1): EffiDwsConvUnit(\n",
       "          (dw_conv): ConvBlock(\n",
       "            (conv): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), groups=40, bias=False)\n",
       "            (bn): BatchNorm2d(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (pw_conv): ConvBlock(\n",
       "            (conv): Conv2d(40, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiDwsConvUnit(\n",
       "          (dw_conv): ConvBlock(\n",
       "            (conv): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), groups=24, bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(24, 6, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(6, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (pw_conv): ConvBlock(\n",
       "            (conv): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage2): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(144, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), groups=144, bias=False)\n",
       "            (bn): BatchNorm2d(144, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage3): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(192, 192, kernel_size=(5, 5), stride=(2, 2), groups=192, bias=False)\n",
       "            (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage4): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(288, 288, kernel_size=(3, 3), stride=(2, 2), groups=288, bias=False)\n",
       "            (bn): BatchNorm2d(288, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(288, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit4): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit5): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit6): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), groups=576, bias=False)\n",
       "            (bn): BatchNorm2d(576, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(576, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit7): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit8): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit9): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit10): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(136, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (stage5): Sequential(\n",
       "        (unit1): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(816, 816, kernel_size=(5, 5), stride=(2, 2), groups=816, bias=False)\n",
       "            (bn): BatchNorm2d(816, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(816, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit2): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit3): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit4): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit5): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit6): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(232, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit7): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(1392, 1392, kernel_size=(3, 3), stride=(1, 1), groups=1392, bias=False)\n",
       "            (bn): BatchNorm2d(1392, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(1392, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "        (unit8): EffiInvResUnit(\n",
       "          (conv1): ConvBlock(\n",
       "            (conv): Conv2d(384, 2304, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(2304, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (conv2): ConvBlock(\n",
       "            (conv): Conv2d(2304, 2304, kernel_size=(3, 3), stride=(1, 1), groups=2304, bias=False)\n",
       "            (bn): BatchNorm2d(2304, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "            (activ): Swish()\n",
       "          )\n",
       "          (se): SEBlock(\n",
       "            (pool): AdaptiveAvgPool2d(output_size=1)\n",
       "            (conv1): Conv2d(2304, 96, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (activ): Swish()\n",
       "            (conv2): Conv2d(96, 2304, kernel_size=(1, 1), stride=(1, 1))\n",
       "            (sigmoid): Sigmoid()\n",
       "          )\n",
       "          (conv3): ConvBlock(\n",
       "            (conv): Conv2d(2304, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "            (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "      (final_block): ConvBlock(\n",
       "        (conv): Conv2d(384, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn): BatchNorm2d(1536, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (activ): Swish()\n",
       "      )\n",
       "      (final_pool): AdaptiveAvgPool2d(output_size=1)\n",
       "    )\n",
       "  )\n",
       "  (model): Semi_Transformer(\n",
       "    (tail): Tail(\n",
       "      (bn1): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (bn2): Norm()\n",
       "      (pos_embd): PositionalEncoder()\n",
       "      (Qpr): Conv2d(1536, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (L1): Block_head(\n",
       "        (list_layers): ModuleList(\n",
       "          (0): TX(\n",
       "            (dropout): Dropout(p=0.3, inplace=False)\n",
       "            (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "            (norm_1): Norm()\n",
       "            (norm_2): Norm()\n",
       "            (ff): FeedForward(\n",
       "              (linear_1): Linear(in_features=384, out_features=192, bias=True)\n",
       "              (dropout): Dropout(p=0.3, inplace=False)\n",
       "              (linear_2): Linear(in_features=192, out_features=384, bias=True)\n",
       "            )\n",
       "          )\n",
       "          (1): TX(\n",
       "            (dropout): Dropout(p=0.3, inplace=False)\n",
       "            (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "            (norm_1): Norm()\n",
       "            (norm_2): Norm()\n",
       "            (ff): FeedForward(\n",
       "              (linear_1): Linear(in_features=384, out_features=192, bias=True)\n",
       "              (dropout): Dropout(p=0.3, inplace=False)\n",
       "              (linear_2): Linear(in_features=192, out_features=384, bias=True)\n",
       "            )\n",
       "          )\n",
       "        )\n",
       "        (q_linear): Linear(in_features=768, out_features=768, bias=True)\n",
       "      )\n",
       "      (L2): Block_head(\n",
       "        (list_layers): ModuleList(\n",
       "          (0): TX(\n",
       "            (dropout): Dropout(p=0.3, inplace=False)\n",
       "            (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "            (norm_1): Norm()\n",
       "            (norm_2): Norm()\n",
       "            (ff): FeedForward(\n",
       "              (linear_1): Linear(in_features=384, out_features=192, bias=True)\n",
       "              (dropout): Dropout(p=0.3, inplace=False)\n",
       "              (linear_2): Linear(in_features=192, out_features=384, bias=True)\n",
       "            )\n",
       "          )\n",
       "          (1): TX(\n",
       "            (dropout): Dropout(p=0.3, inplace=False)\n",
       "            (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "            (norm_1): Norm()\n",
       "            (norm_2): Norm()\n",
       "            (ff): FeedForward(\n",
       "              (linear_1): Linear(in_features=384, out_features=192, bias=True)\n",
       "              (dropout): Dropout(p=0.3, inplace=False)\n",
       "              (linear_2): Linear(in_features=192, out_features=384, bias=True)\n",
       "            )\n",
       "          )\n",
       "        )\n",
       "        (q_linear): Linear(in_features=768, out_features=768, bias=True)\n",
       "      )\n",
       "      (L3): Block_head(\n",
       "        (list_layers): ModuleList(\n",
       "          (0): TX(\n",
       "            (dropout): Dropout(p=0.3, inplace=False)\n",
       "            (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "            (norm_1): Norm()\n",
       "            (norm_2): Norm()\n",
       "            (ff): FeedForward(\n",
       "              (linear_1): Linear(in_features=384, out_features=192, bias=True)\n",
       "              (dropout): Dropout(p=0.3, inplace=False)\n",
       "              (linear_2): Linear(in_features=192, out_features=384, bias=True)\n",
       "            )\n",
       "          )\n",
       "          (1): TX(\n",
       "            (dropout): Dropout(p=0.3, inplace=False)\n",
       "            (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "            (norm_1): Norm()\n",
       "            (norm_2): Norm()\n",
       "            (ff): FeedForward(\n",
       "              (linear_1): Linear(in_features=384, out_features=192, bias=True)\n",
       "              (dropout): Dropout(p=0.3, inplace=False)\n",
       "              (linear_2): Linear(in_features=192, out_features=384, bias=True)\n",
       "            )\n",
       "          )\n",
       "        )\n",
       "        (q_linear): Linear(in_features=768, out_features=768, bias=True)\n",
       "      )\n",
       "      (classifier): BNClassifier(\n",
       "        (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (classifier): Linear(in_features=768, out_features=2, bias=False)\n",
       "      )\n",
       "    )\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pytorchcv\n",
    "import pytorchcv.model_provider as pycvmodels\n",
    "import sys\n",
    "sys.path.append('/kaggle/input/transformer2')\n",
    "from transformer_v3 import Semi_Transformer\n",
    "\n",
    "class EfficientNetB3c_feature(nn.Module):\n",
    "\n",
    "    def __init__(self, ckpt_path=None):\n",
    "        super(EfficientNetB3c_feature, self).__init__()\n",
    "        self.model = get_model(\"efficientnet_b3c\", pretrained=False).features\n",
    "        if ckpt_path is not None:\n",
    "            checkpoint = torch.load(ckpt_path, map_location='cuda')\n",
    "            model_dict = self.state_dict()\n",
    "            new_dict = {}\n",
    "            for key in checkpoint:\n",
    "                if \"model\" not in key:\n",
    "                    key_ = \"model.\" + key.replace('module.', '')\n",
    "                else:\n",
    "                    key_ = key.replace('module.', '')\n",
    "                new_dict[key_.replace(\"features.\", \"\")] = checkpoint[key]\n",
    "            # print(new_dict.keys())\n",
    "            pretrained_dict = {k:v for  k, v in new_dict.items() if k in model_dict}\n",
    "            print(\"loading dict...\", len(pretrained_dict))\n",
    "            model_dict.update(pretrained_dict)\n",
    "            self.load_state_dict(model_dict)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n",
    "\n",
    "class CNN_Transformer(nn.Module):\n",
    "\n",
    "    def __init__(self, ckpt_path=None):\n",
    "        super(CNN_Transformer, self ).__init__()\n",
    "        self.cnn_feature_dim = 1536\n",
    "        self.cnn = EfficientNetB3c_feature(ckpt_path)\n",
    "        self.model = Semi_Transformer(num_classes=2,seq_len=20)\n",
    "\n",
    "    def freeze_until(self, net, param_name):\n",
    "        found_name = False\n",
    "        for name, params in net.named_parameters():\n",
    "            if name == param_name:\n",
    "                found_name = True\n",
    "            params.requires_grad = found_name\n",
    "\n",
    "\n",
    "    def forward(self, x):\n",
    "        batch_size, n_channels, n_frames, height, width = x.size()\n",
    "        x = x.permute(0, 2, 1, 3, 4)\n",
    "        x = x.reshape(batch_size * n_frames, n_channels, height, width)\n",
    "        x = self.cnn(x)\n",
    "        x = x.view(batch_size, n_frames, self.cnn_feature_dim,1,1)\n",
    "        x,_ = self.model(x)\n",
    "        x = x[:,0]\n",
    "        #print(x.shape)\n",
    "        return x\n",
    "\n",
    "model14 = CNN_Transformer()\n",
    "model14.load_state_dict(torch.load(lst_checkpoints[13]))\n",
    "model14 = model14.cuda(device=device)\n",
    "model14.eval()\n",
    "\n",
    "model15 = CNN_Transformer()\n",
    "model15.load_state_dict(torch.load(lst_checkpoints[14]))\n",
    "model15 = model15.cuda(device=device)\n",
    "model15.eval()\n",
    "\n",
    "model16 = CNN_Transformer()\n",
    "model16.load_state_dict(torch.load(lst_checkpoints[15]))\n",
    "model16 = model16.cuda(device=device)\n",
    "model16.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def face_alignment(img, bboxes, predictor):\n",
    "    faces = dlib.full_object_detections()\n",
    "    face_ids = list()  \n",
    "    for i in range(len(bboxes)):\n",
    "        x1,y1,x2,y2 = bboxes[i][:4]\n",
    "        face_id = bboxes[i][4]\n",
    "        dets = dlib.rectangle(x1,y1,x2,y2)\n",
    "        shape = predictor(img, dets)\n",
    "        faces.append(shape)\n",
    "        face_ids.append(face_id)\n",
    "    images = dlib.get_face_chips(img, faces, input_size)\n",
    "    return images, face_ids\n",
    "\n",
    "\n",
    "def detect_single_faces(img):\n",
    "    bboxes = nets.predict_one_image(img,channel='RGB')\n",
    "    faces = []\n",
    "    for i in range(len(bboxes)):\n",
    "        x1,y1,x2,y2,p = bboxes[i]\n",
    "        if p < face_detect_threshold:\n",
    "            continue\n",
    "        x1 = int(x1)\n",
    "        x2 = int(x2)\n",
    "        y1 = int(y1)\n",
    "        y2 = int(y2)\n",
    "        w_ = (x2-x1)*0.1\n",
    "        h_ = (y2-y1)*0.1\n",
    "        x1 = int(x1-w_)\n",
    "        x2 = int(x2+w_)\n",
    "        y1 = int(y1-h_)\n",
    "        y2 = int(y2+h_)\n",
    "        faces.append([x1,y1,x2,y2,i])\n",
    "    return faces\n",
    "\n",
    "\n",
    "def read_video(path):\n",
    "    vc = cv2.VideoCapture(path)\n",
    "    \n",
    "    num_frame = vc.get(7)\n",
    "    interval = int(num_frame // 20)\n",
    "    \n",
    "    ret,img = vc.read()\n",
    "    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
    "    \n",
    "    i = 1\n",
    "    images = []\n",
    "    ids = []\n",
    "    while ret:\n",
    "        i = i + 1\n",
    "        ret = vc.grab()\n",
    "        \n",
    "        if len(images) >= 40:\n",
    "            break\n",
    "            \n",
    "        if i % interval == 0:\n",
    "            ret, img = vc.retrieve()\n",
    "            if img is None:\n",
    "                continue\n",
    "            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
    "            \n",
    "            faces_locs = detect_single_faces(img) \n",
    "            \n",
    "            images_aligned = []\n",
    "            if not len(faces_locs) == 0:\n",
    "                # RGB\n",
    "                images_aligned, face_ids = face_alignment(img, faces_locs, pred_model)\n",
    "                # RGB\n",
    "                images = images + images_aligned\n",
    "                for face_id in face_ids:\n",
    "                    ids.append(face_id)\n",
    "                    \n",
    "    images = np.array(images)\n",
    "    return images, ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def inference(video_path):\n",
    "    faces, face_ids = read_video(video_path)\n",
    "    \n",
    "    if len(faces) != 0:\n",
    "        transforms = torchvision.transforms.Compose([\n",
    "            # transforms on PIL Image\n",
    "            torchvision.transforms.Resize(input_size),\n",
    "            torchvision.transforms.CenterCrop(input_size),\n",
    "            # transforms on Tensor\n",
    "            torchvision.transforms.ToTensor(),\n",
    "            torchvision.transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n",
    "        ])\n",
    "        \n",
    "        inputs = torch.zeros(faces.shape[0], faces.shape[3], faces.shape[1], faces.shape[2])\n",
    "        for i in range(len(faces)):\n",
    "            face = Image.fromarray(faces[i])\n",
    "            inputs[i] = transforms(face)\n",
    "            \n",
    "        with torch.no_grad():\n",
    "            inputs = inputs.to(device)\n",
    "            predictions1 = model1(inputs)        \n",
    "            predictions1 = torch.sigmoid(predictions1).squeeze()\n",
    "            predictions2 = model2(inputs)\n",
    "            predictions2 = torch.sigmoid(predictions2).squeeze()\n",
    "            predictions3 = model3(inputs)\n",
    "            predictions3 = torch.sigmoid(predictions3).squeeze()\n",
    "            predictions4 = model4(inputs)        \n",
    "            predictions4 = torch.sigmoid(predictions4).squeeze()\n",
    "            predictions5 = model5(inputs)\n",
    "            predictions5 = torch.sigmoid(predictions5).squeeze()\n",
    "            predictions6 = model6(inputs)\n",
    "            predictions6 = torch.sigmoid(predictions6).squeeze()\n",
    "            predictions7 = model7(inputs)\n",
    "            predictions7 = torch.sigmoid(predictions7).squeeze()\n",
    "            predictions8 = model8(inputs)\n",
    "            predictions8 = torch.sigmoid(predictions8).squeeze()\n",
    "            predictions9 = model9(inputs)\n",
    "            predictions9 = torch.sigmoid(predictions9).squeeze()\n",
    "            predictions10 = model10(inputs)\n",
    "            predictions10 = torch.sigmoid(predictions10).squeeze()\n",
    "            predictions_cnn1 = 0.40 * (0.4*predictions1 + 0.3*predictions2 + 0.3*predictions3) + 0.45 * (predictions4 + predictions5 + predictions6) / 3 + 0.15 * predictions7\n",
    "            predictions_cnn2 = (predictions8 + predictions9 + predictions10) / 3\n",
    "            predictions_cnn = 0.50 * predictions_cnn1 + 0.50 * predictions_cnn2\n",
    "            # print(float(torch.mean(predictions_cnn1).cpu().detach().numpy()), float(torch.mean(predictions_cnn2).cpu().detach().numpy()))\n",
    "            \n",
    "        # handle videos with more than two faces\n",
    "        if len(inputs) > 20:\n",
    "            predictions_sort, _ = torch.sort(predictions_cnn, descending=True)\n",
    "            predictions = predictions_sort[0: 20]\n",
    "            output = float(torch.mean(predictions).cpu().detach().numpy())\n",
    "            output_cnn = output\n",
    "            output_lrcn = -1\n",
    "            output_transformer = -1\n",
    "            '''\n",
    "            if output > 0.6:\n",
    "                output = (output + 2) / 3\n",
    "            elif output < 0.4:\n",
    "                output = output / 3\n",
    "            '''\n",
    "        else:\n",
    "            inputs_lrcn_ = torch.zeros(inputs.shape[0] // 2, inputs.shape[1], inputs.shape[2], inputs.shape[3])\n",
    "            inputs_lrcn = torch.zeros(10, inputs.shape[1], inputs.shape[2], inputs.shape[3])\n",
    "            for i in range(inputs.shape[0] // 2):\n",
    "                inputs_lrcn_[i] = inputs[2 * i]\n",
    "            for i in range(10):\n",
    "                inputs_lrcn[i] = inputs_lrcn_[i % len(inputs_lrcn_)]\n",
    "            inputs_lrcn = inputs_lrcn.permute(1, 0, 2, 3)\n",
    "            inputs_lrcn = inputs_lrcn.unsqueeze(0)\n",
    "            # print(inputs_lrcn.shape)\n",
    "            with torch.no_grad():\n",
    "                inputs_lrcn = inputs_lrcn.to(device)\n",
    "                predictions11 = model11(inputs_lrcn.half())\n",
    "                predictions11 = torch.sigmoid(predictions11).squeeze()\n",
    "                predictions12 = model12(inputs_lrcn.half())\n",
    "                predictions12 = torch.sigmoid(predictions12).squeeze()\n",
    "                predictions13 = model13(inputs_lrcn)\n",
    "                predictions13 = torch.sigmoid(predictions13).squeeze()\n",
    "                predictions14 = model14(inputs_lrcn)\n",
    "                predictions14 = torch.sigmoid(predictions14).squeeze()\n",
    "                predictions15 = model15(inputs_lrcn)\n",
    "                predictions15 = torch.sigmoid(predictions15).squeeze()\n",
    "                predictions16 = model16(inputs_lrcn)\n",
    "                predictions16 = torch.sigmoid(predictions16).squeeze()\n",
    "                predictions_lrcn = (predictions11 + predictions12 + predictions13) / 3\n",
    "                predictions_transformer = (predictions14 + predictions15 + predictions16) / 3\n",
    "                output_cnn = float(torch.mean(predictions_cnn).cpu().detach().numpy())\n",
    "                output_lrcn = float(torch.mean(predictions_lrcn).cpu().detach().numpy())\n",
    "                output_transformer = float(torch.mean(predictions_transformer).cpu().detach().numpy())\n",
    "                #print('transformer: '+str(predictions_transformer))\n",
    "                output = output_cnn * 0.4 + output_lrcn * 0.4 + output_transformer * 0.2\n",
    "    else:\n",
    "        output = 0.5\n",
    "        output_cnn = -1\n",
    "        output_lrcn = -1\n",
    "        output_transformer = -1\n",
    "        \n",
    "    return output, output_cnn, output_lrcn, output_transformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading test files' directory\n",
    "test_dir = '/kaggle/input/deepfake-detection-challenge/test_videos'\n",
    "filenames = os.listdir(test_dir)\n",
    "lst_dir_testfiles = [os.path.join(test_dir, filename) for filename in filenames]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = dict()\n",
    "\n",
    "for dir_testfile in lst_dir_testfiles:\n",
    "    video_name = dir_testfile.split('/')[-1]\n",
    "    try:\n",
    "    # if True:\n",
    "        proba, pcnn, plrcn, ptrs = inference(dir_testfile)\n",
    "        results[video_name] = proba\n",
    "        # print(video_name, proba, pcnn, plrcn, ptrs)\n",
    "    except Exception as e:\n",
    "        results[video_name] = 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub_path = \"/kaggle/input/deepfake-detection-challenge/sample_submission.csv\"\n",
    "sub = pd.read_csv(sub_path)\n",
    "sub = sub.set_index(\"filename\", drop=False)\n",
    "\n",
    "for video in results:\n",
    "    sub.loc[video, \"label\"] = results[video]\n",
    "\n",
    "sub.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
